#include "replay.h"

#include <algorithm>

namespace KHAS{


///////////////////////////////////////////////////////////////////////////////////


bool Replay::setValidity(bool newValidity) noexcept
{
    return setCheckValue("validity", newValidity);
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

bool Replay::setIsReplay(bool newIsReplay) noexcept
{
    return setCheckValue("isReplay", newIsReplay);
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

bool Replay::setIsHasMods(bool newHasMods) noexcept
{
    return setCheckValue("hasMods", newHasMods);
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

bool Replay::setplayerID(size_t newplayerID) noexcept
{
    return setCheckValue("playerID", newplayerID);
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

bool Replay::setArenaCreateTime(size_t newArenaCreateTime) noexcept
{
    return setCheckValue("arenaCreateTime", newArenaCreateTime);
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

bool Replay::setId(size_t newId) noexcept
{
    return setCheckValue("id", newId);
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

bool Replay::setSize(size_t newSize) noexcept
{
    return setCheckValue("size", newSize);
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

bool Replay::setRespawn(size_t newRespawn) noexcept
{
    return setCheckValue("respawn", newRespawn);
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

bool Replay::setDuration(size_t newDuration) noexcept
{
    return setCheckValue("duration", newDuration);
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

bool Replay::setWinnerTeam(size_t newWinnerTeam) noexcept
{
    return setCheckValue("winnerTeam", newWinnerTeam);
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

bool Replay::setBattleType(size_t newBattleType) noexcept
{
    KHAS::BattleType bt{ getBattleType(std::to_string(newBattleType)) };

    auto&& [value, isValue] = isGetValue<std::string>(bt);
    if(isValue) {
        return setCheckValue("battleType", value);
    }
    return false;
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

bool Replay::setDateTime(const std::string &newDateTime) noexcept
{
    return setCheckValue("dateTime", newDateTime);
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

bool Replay::setVehicle(const std::string &newVehicle) noexcept
{
    return setCheckValue("playerVehicle", newVehicle);
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

bool Replay::setMapName(const std::string &newMapName) noexcept
{
    return setCheckValue("mapName", newMapName);
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

bool Replay::setPlayerName(const std::string &newPlayerName) noexcept
{
    return setCheckValue("playerName", newPlayerName);
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

bool Replay::setMapDisplayName(const std::string &newMapDisplayName) noexcept
{
    return setCheckValue("mapDisplayName", newMapDisplayName);
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

bool Replay::setReplayName(const std::string &newReplayName) noexcept
{
    return setCheckValue("replayName", newReplayName);
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

bool Replay::setClientVersionFromXML(const std::string &newClientVersionFromXML) noexcept
{
    return setCheckValue("clientVersionFromXml", newClientVersionFromXML);
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

BattleType Replay::getBattleType(const std::string& index) noexcept
{
    auto&& [value, isValue] = Settings::stringToType<size_t>(index);
    if(!isValue) return KHAS::BattleType::Unknown;

    switch(value){
    case 1:
    return KHAS::BattleType::Random;
    case 2:
    return KHAS::BattleType::Workout;
    case 7:
    return KHAS::BattleType::TeamBattle;
    case 9:
    return KHAS::BattleType::FanMode;
    case 13:
    return KHAS::BattleType::GK;
    case 22:
    return KHAS::BattleType::RankedBattle;
    case 24:
    return KHAS::BattleType::PitchedBattle;
    case 27:
    return KHAS::BattleType::FrontLine;
    case 29:
    return KHAS::BattleType::Tournament;
    default:
    return KHAS::BattleType::Unknown;

    }
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

size_t Replay::getCount() noexcept
{
    return count_;
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

size_t Replay::getCountValidity() noexcept
{
    return countValidity_;
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

void Replay::clearCounts() noexcept
{
    mxCount_.lock();
    count_ = 0;
    mxCount_.unlock();

    mxCountValidity_.lock();
    countValidity_ = 0;
    mxCountValidity_.unlock();
}

    ////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////

size_t Replay::fstreamSize(std::ifstream &fs) const noexcept
{
    fs.seekg(std::ios::beg);
    auto sizeBegin{ fs.tellg() };
    fs.seekg(0, std::ios::end);
    auto sizeEnd{ fs.tellg() };
    fs.seekg(std::ios::beg);
    return static_cast<size_t>(sizeEnd - sizeBegin);
}

    ////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////

void Replay::ParseCommonBlock(QJsonObject &&data, Replay &replay)
{
    for(auto it{data.begin()}, ite{data.end()}; it != ite; ++it)
    {
        if(it.key() == "arenaCreateTime")   replay.setArenaCreateTime(std::move(it.value().toInteger()));
        if(it.key() == "duration")          replay.setDuration(std::move(it.value().toInteger()));
        if(it.key() == "finishReason")      replay.setWinnerTeam(std::move(it.value().toInteger()));
        if(it.key() == "winnerTeam")        replay.setWinnerTeam(std::move(it.value().toInteger()));
    }
}

    ////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////





}
